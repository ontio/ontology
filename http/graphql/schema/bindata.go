/*
 * Copyright (C) 2018 The ontology Authors
 * This file is part of The ontology library.
 *
 * The ontology is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The ontology is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.
 */

// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package schema generated by go-bindata.// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\xb0\xc8\xa5\xbb\xf4\xd0\xb5\xc5\xe0\x5b\xb3\x16\x48\xd1\xaf\x6c\xc9\x36\x0c\x45\x31\x30\x32\x6b\x0b\xb1\x25\x4f\x94\xd3\x18\x45\xff\xfb\x20\xcb\x76\xe5\xc4\x1d\xd0\x53\x22\xea\xf1\xe9\x3d\x92\x92\x27\xb0\x42\xa6\xd3\x2f\xa0\x0d\x64\xb4\x05\xb6\x46\xaa\x14\x30\x49\x0c\x31\x47\x2c\x30\x47\x03\xe7\xed\x72\x12\x62\xf4\x13\x64\xc8\xd9\xf1\xe9\x59\x07\x9b\xb9\xff\xbb\x98\xb2\x5a\xe5\x52\xc0\x9a\xea\x0e\x36\xaf\x56\xd7\x54\x47\xdd\xf2\x87\x54\xf6\xf3\x71\x34\x81\x4a\x2a\x7b\x76\x02\xa4\x84\x4e\x28\x01\xe4\x96\x25\x04\x9e\x9d\x44\x11\xa9\xaa\x80\xe5\x76\x59\x97\x04\x2f\x11\x00\xc0\xd5\xdd\xcf\xfb\xeb\xcb\x3f\x77\x97\xf7\xe1\xf2\xd7\xf9\xe2\xb6\x59\x5f\x5c\xce\x6f\xee\x7f\xf7\xdb\xed\xb2\xd9\x7e\x8d\x22\xa9\x2c\x99\x27\x14\x04\x73\xac\x73\x8d\x49\x4b\xea\x54\x40\x0c\x8b\x46\xc3\x81\x43\x5a\x77\xe2\x95\xda\xe8\x35\x7d\x75\x9b\xb2\x28\x73\x2a\x48\x59\x1e\x49\xdd\xcf\xbc\xa0\x32\xd7\xf5\x47\x32\x5d\x64\x53\x38\xa3\xc3\x98\xc2\x62\x17\x45\x86\xa5\x56\xc3\x20\x56\x36\xd3\x66\x18\xa3\x02\x65\x3e\x0c\x25\xc4\x62\xa0\x76\x02\xd6\xa0\x62\x14\x56\x6a\xe5\x9a\x50\x09\x5b\x19\x72\xdd\xd4\xca\xea\x5c\xa7\xb5\x77\xb4\x0c\x60\x2f\x43\x1d\xbe\xab\xfe\x00\x37\x26\x71\x33\x1d\xad\x7c\xad\x04\x0d\x21\x76\xeb\x5d\xfa\xb6\xfa\x58\x8a\x3c\x37\x72\x17\x99\x22\xdf\xc8\x42\xda\x61\xb4\xc4\x9a\x4c\xdc\x0d\x6a\x1f\x73\x95\x8d\xbb\x12\xfb\x28\xcb\x94\x63\x78\x58\xc8\xf4\xe0\xf1\x20\xf2\xfa\x48\xa6\x59\x40\xd8\x35\x6c\x21\xd3\xd6\x16\xcb\xf4\x02\x2d\xba\x3c\x5f\xa6\xc7\xf6\x88\x66\x94\x1d\x9f\x1f\xea\x2e\x7e\x3b\x20\x9b\xc0\x34\xd7\x62\xfd\xbf\x4a\x7a\x80\x3f\x6c\x02\xcb\x8c\x20\x23\x4c\xc8\x38\xa4\xcd\x24\xc3\xca\x01\x8e\x5a\xb9\x6e\x27\x86\x59\xf3\xdb\x7a\xf0\x49\x41\xdf\x38\xc8\x03\xa9\x44\x5e\x25\x94\x78\x82\x10\x15\xc3\x43\xd0\x45\xa7\xbf\x11\xec\xb9\x41\x3a\x96\x50\x0b\x7a\x42\x2f\xba\x05\x85\xaa\xdb\xfe\xf7\xb2\x7d\xe6\xd1\xf8\x6c\x84\x6e\x91\xb3\xd1\xa4\x70\x76\x02\x7c\x69\x68\x23\x75\xd5\xf9\x73\x28\x8f\x77\x1b\xb3\xf1\x1c\x51\x19\x43\xca\x76\x29\x4d\xd3\x8f\x46\x07\x20\xac\xa8\x2c\x88\x2d\x16\x65\x58\xce\x94\x14\x19\xb4\x7d\x3d\x3b\xcc\x28\x43\x41\x66\x9d\xbb\xd6\x10\x81\xd1\xda\xc2\xb3\xb4\x19\xe4\x84\x1b\x62\x78\x32\xba\x68\xe8\xb8\x27\xb7\x7a\xaf\xe3\xcd\xdf\xef\x5a\xdb\x11\x57\x83\x96\x37\xfc\x23\x23\x63\xb7\xfc\x4e\xba\xd0\x8a\x49\x71\xc5\x90\xa0\xc5\xb1\xdc\x1e\xe1\x6f\x80\x7f\x85\x87\x0e\xab\xdc\xca\xee\x9b\xe1\x28\x84\x56\xba\x65\x55\x3a\x21\x86\xe7\x4c\x83\x40\xd5\x17\x0e\x14\x6d\x6d\x78\x88\x5b\x4f\xb5\x5e\xaf\x89\xca\xc1\x45\x1e\x4a\xdd\x67\xed\x19\xf7\x6a\xd6\xb3\x0d\xaf\x67\x40\xc8\x32\x55\xd8\xdd\xc7\x8f\xb1\x8f\x3d\x08\xdd\xb3\x31\xc5\x1c\x95\xe8\xbe\x4d\x5a\xd9\xb7\xa2\xf9\x40\x3a\x0c\xbc\xf7\xfc\x7c\xab\xc8\xd4\x2d\x4b\x4a\xb6\x79\x22\xa6\xf5\xac\x41\x1f\xee\x24\x7d\x8a\xfd\x13\xb2\x0b\x46\xce\x0e\x83\x2b\x34\x0a\xf3\xa0\x3d\xbe\xb7\xf7\x3a\x25\xbb\xdc\xee\xd0\x04\x8f\x46\x4f\xe6\x7d\x1f\xba\x41\x78\xeb\xa0\x3b\xd2\x6f\x34\xce\x58\x64\x54\x60\xeb\xea\xaf\x73\x18\x7b\xa3\xd1\x6b\xf4\x2f\x00\x00\xff\xff\x28\x4d\x93\xb3\x8d\x08\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 2189, mode: os.FileMode(438), modTime: time.Unix(1598341445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}

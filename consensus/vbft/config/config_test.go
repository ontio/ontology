/*
 * Copyright (C) 2018 The ontology Authors
 * This file is part of The ontology library.
 *
 * The ontology is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The ontology is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.
 */

package vconfig

import (
	"bytes"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"github.com/stretchr/testify/assert"
	"testing"
)

func generTestData() []byte {
	nodeId := "12020298fe9f22e9df64f6bfcc1c2a14418846cffdbbf510d261bbc3fa6d47073df9a2"
	chainPeers := make([]*PeerConfig, 0)
	peerconfig := &PeerConfig{
		Index: 12,
		ID:    nodeId,
	}
	chainPeers = append(chainPeers, peerconfig)

	tests := &ChainConfig{
		Version:              1,
		View:                 12,
		N:                    4,
		C:                    3,
		BlockMsgDelay:        1000,
		HashMsgDelay:         1000,
		PeerHandshakeTimeout: 10000,
		Peers:                chainPeers,
		PosTable:             []uint32{2, 3, 1, 3, 1, 3, 2, 3, 2, 3, 2, 1, 3},
	}
	cc := new(bytes.Buffer)
	tests.Serialize(cc)
	return cc.Bytes()
}
func TestSerialize(t *testing.T) {
	res := generTestData()
	fmt.Println("serialize:", res)
}

func TestDeserializeConsensusPayload(t *testing.T) {
	remotePayload := "7b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a372c2263223a322c22626c6f636b5f6d73675f64656c6179223a353030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a362c226964223a22303366313039353238396537666464623838326631636233653135386163633163333064396465363036616632316339376261383531383231653862366561353335227d2c7b22696e646578223a352c226964223a22303338626663353062306533663065356466366434353130363930363563626661376162356433383261353833396363653832653063393633656462303236653934227d2c7b22696e646578223a322c226964223a22303335656236353462616436633634303938393462396234323238396134333631343837346337393834626465366230336161663666633164303438366439643435227d2c7b22696e646578223a332c226964223a22303238316431393863306464333733376139633339313931626332643161663764363561343432363161386136346436656637346436336632376366623565643932227d2c7b22696e646578223a312c226964223a22303235336363666434333962323965636130666539306361376336656161316639383537326130353461613264316435366537326164393663343636313037613835227d2c7b22696e646578223a342c226964223a22303233393637626261333036306266386164653036643962616434356430323835336636633632336534643466353264373637656235366466346433363461393966227d2c7b22696e646578223a372c226964223a22303231353836356261616237303630376634613234313361376139626139356162326333633032303264356237373331633638323465656634386538393966633930227d5d2c22706f735f7461626c65223a5b312c362c332c332c332c372c322c342c322c362c362c352c372c342c312c372c332c352c362c322c312c352c372c342c362c362c342c322c332c352c332c332c312c342c362c352c372c352c372c332c312c352c352c322c352c352c362c342c342c362c312c352c372c372c332c312c372c332c322c312c322c352c352c342c332c362c372c312c342c322c332c362c312c312c322c312c362c342c332c332c342c332c372c362c322c312c322c322c362c342c342c322c322c342c372c372c342c352c352c372c312c362c322c312c375d2c224d6178426c6f636b4368616e676556696577223a357d7d"
	localPayload := "7b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a372c2263223a322c22626c6f636b5f6d73675f64656c6179223a353030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a362c226964223a22303366313039353238396537666464623838326631636233653135386163633163333064396465363036616632316339376261383531383231653862366561353335227d2c7b22696e646578223a352c226964223a22303338626663353062306533663065356466366434353130363930363563626661376162356433383261353833396363653832653063393633656462303236653934227d2c7b22696e646578223a322c226964223a22303335656236353462616436633634303938393462396234323238396134333631343837346337393834626465366230336161663666633164303438366439643435227d2c7b22696e646578223a332c226964223a22303238316431393863306464333733376139633339313931626332643161663764363561343432363161386136346436656637346436336632376366623565643932227d2c7b22696e646578223a312c226964223a22303235336363666434333962323965636130666539306361376336656161316639383537326130353461613264316435366537326164393663343636313037613835227d2c7b22696e646578223a342c226964223a22303233393637626261333036306266386164653036643962616434356430323835336636633632336534643466353264373637656235366466346433363461393966227d2c7b22696e646578223a372c226964223a22303231353836356261616237303630376634613234313361376139626139356162326333633032303264356237373331633638323465656634386538393966633930227d5d2c22706f735f7461626c65223a5b312c362c332c332c332c372c322c342c322c362c362c352c372c342c312c372c332c352c362c322c312c352c372c342c362c362c342c322c332c352c332c332c312c342c362c352c372c352c372c332c312c352c352c322c352c352c362c342c342c362c312c352c372c372c332c312c372c332c322c312c322c352c352c342c332c362c372c312c342c322c332c362c312c312c322c312c362c342c332c332c342c332c372c362c322c312c322c322c362c342c342c322c322c342c372c372c342c352c352c372c312c362c322c312c375d2c224d6178426c6f636b4368616e676556696577223a357d7d"

	remoteData, err := hex.DecodeString(remotePayload)
	if err != nil {
		t.Fatal(err)
	}
	localData, err := hex.DecodeString(localPayload)
	if err != nil {
		t.Fatal(err)
	}

	remoteConsensus := &VbftBlockInfo{}
	localConsensus := &VbftBlockInfo{}
	err = json.Unmarshal(remoteData, remoteConsensus)
	if err != nil {
		t.Fatal(err)
	}
	err = json.Unmarshal(localData, localConsensus)
	if err != nil {
		t.Fatal(err)
	}
	remoteChainCfg := remoteConsensus.NewChainConfig
	localChainCfg := localConsensus.NewChainConfig
	assert.Equal(t, remoteChainCfg.Version, localChainCfg.Version)
	assert.Equal(t, remoteChainCfg.View, localChainCfg.View)
	assert.Equal(t, remoteChainCfg.N, localChainCfg.N)
	assert.Equal(t, remoteChainCfg.C, localChainCfg.C)
	assert.Equal(t, remoteChainCfg.BlockMsgDelay, localChainCfg.BlockMsgDelay)
	assert.Equal(t, remoteChainCfg.HashMsgDelay, localChainCfg.HashMsgDelay)
	assert.Equal(t, remoteChainCfg.PeerHandshakeTimeout, localChainCfg.PeerHandshakeTimeout)
	assert.Equal(t, remoteChainCfg.Peers, localChainCfg.Peers)
	assert.Equal(t, remoteChainCfg.PosTable, localChainCfg.PosTable)
	assert.Equal(t, remoteChainCfg.MaxBlockChangeView, localChainCfg.MaxBlockChangeView)
}
